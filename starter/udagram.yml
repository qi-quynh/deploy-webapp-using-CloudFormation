Description: 
  QuynhLTD / Udacity
  Deploy Infrastructure as Code (IAC) / Deploy a high-availability web app using CloudFormation

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  AMIId:
    Description: AMI ID
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
     - t2.micro
     - t2.micro
     - t2.medium
     - t3.medium
     
  VPCIP:
    Description: IP of Virtual Private Cloud (VPC).
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1IP:
    Description: IP for public subnet in the 1st Az
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2IP:
    Description: IP for public subnet in the 2nd Az
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1IP:
    Description: IP for private subnet in the 1st Az
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2IP:
    Description:  IP for private subnet in the 2nd Az
    Type: String
    Default: 10.0.4.0/24

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCIP
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref MyInternetGateway

  MyIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  MyIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MyIAMRole

  MyNatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: MyVPCGatewayAttachment
    Properties:
      Domain: vpc

  MyNatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: MyVPCGatewayAttachment
    Properties:
      Domain: vpc

  PublicRouteDefault:
    Type: AWS::EC2::Route
    DependsOn: MyVPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MyPublicRouteTable
      GatewayId: !Ref MyInternetGateway

  PrivateRoute1Default:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MyPrivateRouteTable1
      NatGatewayId: !Ref MyNatGateway1

  PrivateRoute2Default:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MyPrivateRouteTable2
      NatGatewayId: !Ref MyNatGateway2

  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  PublicSubnet1:
    Description: Public subnet in the 1st Az
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1IP
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1 (AZ1)
  
  PublicSubnet2:
    Description: Public subnet in the 2nd Az
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2IP
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 2 (AZ2)

  MyNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  
  MyNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  MyPublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      SubnetId: !Ref PublicSubnet1

  MyPublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1IP
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1 (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2IP
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 2 (AZ2)

  MyPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)
  
  MyPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  MyPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref MyPrivateRouteTable1

  MyPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref MyPrivateRouteTable2

  MyServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My server security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  MyLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer security group 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyAppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          sudo apt-get install nginx -y
          sudo service nginx start
          echo "<html><head><title>Udagram</title></head><body><h1>Udagram Project: Deploy a high-availability web app using CloudFormation</h1></body></html>" > index.html
          sudo cp index.html /var/www/html/
      ImageId: !Ref AMIId
      SecurityGroups:
        - Ref: MyServerSecurityGroup
      IamInstanceProfile: !Ref MyIAMInstanceProfile
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  MyAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        Ref: MyAppLaunchConfiguration
      TargetGroupARNs:
        - Ref: MyAppTargetGroup
      MaxSize: "5"
      MinSize: "2"
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      HealthCheckGracePeriod: 60

  MyAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: udagramwebapp
      SecurityGroups:
        - Ref: MyLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  MyAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      HealthCheckPath: /
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: "80"
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: MyAppTargetGroup 
      LoadBalancerArn:
        Ref: MyAppLoadBalancer
      
  MyListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 1
      ListenerArn: !Ref "MyListener"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "MyAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      
Outputs:
  MyDNSName:
    Description: DNS name of the load balancer
    Value: !Sub "http://${MyAppLoadBalancer.DNSName}"
    Export:
      Name: MyDNSName